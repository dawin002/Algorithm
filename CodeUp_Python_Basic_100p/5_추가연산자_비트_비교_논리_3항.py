""" 6046 : [기초-비트시프트연산] 정수 1개 입력받아 2배 곱해 출력하기 """

# 정수 1개를 입력받아 2배 곱해 출력해보자.

# 참고
# *2 를 계산한 값을 출력해도 되지만,
# 정수를 2배로 곱하거나 나누어 계산해 주는 비트단위시프트연산자 <<, >>를 이용할 수 있다.
# 컴퓨터 내부에는 2진수 형태로 값들이 저장되기 때문에,
# 2진수 형태로 저장되어 있는 값들을 왼쪽(<<)이나 오른쪽(>>)으로
# 지정한 비트 수만큼 밀어주면 2배씩 늘어나거나 1/2로 줄어드는데,

# 왼쪽 비트시프트(<<)가 될 때에는 오른쪽에 0이 주어진 개수만큼 추가되고,
# 오른쪽 비트시프트(>>)가 될 때에는 왼쪽에 0(0 또는 양의 정수인 경우)이나 1(음의 정수인 경우)이 개수만큼 추가되고,
# 가장 오른쪽에 있는 1비트는 사라진다.

# 예시
# n = 10
# print(n<<1)  #10을 2배 한 값인 20 이 출력된다.
# print(n>>1)  #10을 반으로 나눈 값인 5 가 출력된다.
# print(n<<2)  #10을 4배 한 값인 40 이 출력된다.
# print(n>>2)  #10을 반으로 나눈 후 다시 반으로 나눈 값인 2 가 출력된다.

# n = 10 과 같이 키보드로 입력받지 않고 직접 작성해 넣은 코드에서, 숫자로 시작하는 단어(식별자, identifier)는 자동으로 수로 인식된다.

# n = 10 에서 10 은 10진수 정수 값으로 인식된다.
# n = "10" 또는 n = '10'으로 작성해 넣으면 문자열 값으로 저장되고,
# n = 10.0 으로 작성해 넣으면 자동으로 실수 값으로 저장된다.
# n = 0o10 으로 작성해 넣으면 8진수(octal) 10으로 인식되어 10진수 8값이 저장되고,
# n = 0xf 나 n = 0XF 으로 작성해 넣으면 16진수(hexadecimal) F로 인식되어 10진수 15값으로 저장된다.

# ** python에서 실수 값에 대한 비트시프트 연산은 허용되지 않고 오류가 발생한다.
# (실수 값도 컴퓨터 내부적으로는 2진수 형태로 저장되고 비트시프트 처리가 될 수 있지만, python 에서는 허용하지 않는다.)

# n = int(input())
# n = n << 1
# print(n)

#
#
#
#
#
""" 잘 모르겠는거 다시볼 것 """
""" 6047 : [기초-비트시프트연산] 2의 거듭제곱 배로 곱해 출력하기 """

# 정수 2개(a, b)를 입력받아 a를 2b배 곱한 값으로 출력해보자.
# 0 <= a <= 10, 0 <= b <= 10

# a, b = input().split(' ')
# a = int(a)
# b = int(b)
# print(a << b)

# --> '1 3' 을 입력할 경우 1에 2^3을 곱한 값인 8이 출력된다

#
#
#
#
""" 6048 : [기초-비교연산] 정수 2개 입력받아 비교하기1 """

# 두 정수(a, b)를 입력받아
# a가 b보다 작으면 True 를, a가 b보다 크거나 같으면 False 를 출력하는 프로그램을 작성해보자.

# 참고
# 어떤 값을 비교하기 위해 비교/관계(comparison/relational) 연산자(operator)를 사용할 수 있다.

# 비교/관계연산자 < (less than sign) 는
# 왼쪽의 값이 오른쪽 값 보다 작은 경우 True(참)로 계산하고,
# 그 외의 경우에는 False(거짓)로 계산한다.

# 비교/관계연산자는 <, >, <=, >=, ==(같다), !=(다르다) 6개가 있다.

# True(참) 또는 False(거짓) 값으로만 표현하고 저장하는 값을 불(bool)/불리언(boolean) 값이라고 한다.

# a, b = input().split(' ')
# print(int(a) < int(b))

#
#
#
#
""" 6049 : [기초-비교연산] 정수 2개 입력받아 비교하기2 """

# 두 정수(a, b)를 입력받아
# a와 b의 값이 같으면 True 를, 같지 않으면 False 를 출력하는 프로그램을 작성해보자.

# a, b = input().split(' ')
# print(int(a) == int(b))

#
#
#
#
""" 6050 : [기초-비교연산] 정수 2개 입력받아 비교하기3 """

# 두 정수(a, b)를 입력받아 b의 값이 a의 값 보다 크거나 같으면 True 를, 같지 않으면 False 를 출력하는 프로그램을 작성해보자.

# 참고
# 어떤 값을 비교하기 위해 비교/관계(comparison/relational) 연산자(operator)를 사용할 수 있다. (<= or >=)

# a, b = input().split(' ')
# print(int(a) <= int(b))

#
#
#
#
""" 6051 : [기초-비교연산] 정수 2개 입력받아 비교하기4 """

# 두 정수(a, b)를 입력받아 a의 값이 b의 값과 서로 다르면 True 를, 같으면 False 를 출력하는 프로그램을 작성해보자.

# 참고

# 비교/관계연산자 != 는 왼쪽의 계산 결과값이 오른쪽의 계산 결과값이 서로 다른 경우 True(참)로 계산하고, 그 외의 경우에는 False(거짓)로 계산한다.

# a, b = input().split(' ')
# print(int(a) != int(b))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 6052 : [기초-논리연산] 정수 입력받아 참 거짓 평가하기 """

# 정수가 입력되었을 때, True/False 로 평가해주는 프로그램을 작성해보자.

# 참고
# bool( ) 을 이용하면 입력된 식이나 값을 평가해 불 형의 값(True 또는 False)을 출력해준다. 식이나 값을 계산해서 결과값이 만들어지는 것을 평가(evaluate)라고 한다.

# python 언어에서 bool() 연산에 의해 정수값 0은 False(거짓)로 평가되고, 그 외의 값들은 모두 True(참)로 평가된다.

# a = int(input())
# print(bool(a))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 6053 : [기초-논리연산] 참 거짓 바꾸기 """

# 정수값이 입력될 때,
# 그 불 값을 반대로 출력하는 프로그램을 작성해보자.

# 참고
# a = bool(int(input())) 와 같은 형태로 겹쳐 작성하면, 한 번에 한 단계씩 계산/처리/평가된다.

# 어떤 불 값이나 변수에 not True, not False, not a 와 같은 계산이 가능하다.

# 참 또는 거짓의 논리값을 역(반대)으로 바꾸기 위해서 not 예약어(reserved word, keyword)를 사용할 수 있다.

# 참, 거짓의 논리값 인 불(boolean) 값을 다루어주는 예약어는 not, and, or 이 있고,
# 불 값들 사이의 논리(not, and, or) 연산 결과도 마찬가지로 True 또는 False 의 불 값으로 계산 된다.

# 정수값 0은 False 이고, 나머지 정수 값들은 True 로 평가된다.
# 빈 문자열 "" 나 ''는 False 이고, 나머지 문자열들은 True 로 평가된다.

# a = bool(int(input()))
# print(not a)

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 6054 : [기초-논리연산] 둘 다 참일 경우만 참 출력하기 """

# 2개의 정수값이 입력될 때,
# 그 불 값이 모두 True 일 때에만 True 를 출력하는 프로그램을 작성해보자.

# 참고
# and 예약어는 주어진 두 불 값이 모두 True 일 때에만 True 로 계산하고, 나머지 경우는 False 로 계산한다.
# 이러한 논리연산을 AND 연산(boolean AND)이라고도 부르고, · 으로 표시하거나 생략하며, 집합 기호 ∩(교집합, intersection)로 표시하기도 한다.

# a, b = input().split(' ')
# print(bool(int(a)) and bool(int(b)))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 055 : [기초-논리연산] 하나라도 참이면 참 출력하기 """

# 2개의 정수값이 입력될 때,
# 그 불 값이 하나라도 True 일 때에만 True 를 출력하는 프로그램을 작성해보자.

# 참고
# or 예약어는 주어진 두 불 값 중에서 하나라도 True 이면 True 로 계산하고, 나머지 경우는 False 로 계산한다.
# 이러한 논리연산을 OR 연산(boolean OR)이라고도 부르고, + 로 표시하거나, 집합 기호 ∪(합집합, union)로 표시하기도 한다.
# 모두 같은 의미이다.

# a, b = input().split(' ')
# print(bool(int(a)) or bool(int(b)))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 6056 : [기초-논리연산] 참/거짓이 서로 다를 때에만 참 출력하기 """

# 2개의 정수값이 입력될 때,
# 그 불 값(True/False) 이 서로 다를 때에만 True 를 출력하는 프로그램을 작성해보자.

# 참고
# 참 거짓이 서로 다를 때에만 True 로 계산하는 논리연산을 XOR(exclusive or, 배타적 논리합) 연산이라고도 부른다.

# 논리연산자는 사칙(+, -, *, /) 연산자와 마찬가지로 여러 번 중복해서 사용할 수 있는데,
# 사칙 연산자와 마찬가지로 계산 순서를 표시하기 위해 괄호 ( )를 사용할 수 있다.
# 괄호를 사용하면 계산 순서를 명확하게 표현할 수 있다.

# a, b = input().split(' ')
# a = bool(int(a))
# b = bool(int(b))
# print( (a and not b) or (b and not a))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 6057 : [기초-논리연산] 참/거짓이 서로 같을 때에만 참 출력하기 """

# 2개의 정수값이 입력될 때,
# 그 불 값(True/False) 이 서로 같을 때에만 True 를 출력하는 프로그램을 작성해보자.

# a, b = input().split(' ')
# a = bool(int(a))
# b = bool(int(b))
# print( (a and b) or (not a and not b))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 """
""" 6058 : [기초-논리연산] 둘 다 거짓일 경우만 참 출력하기 """

# 2개의 정수값이 입력될 때,
# 그 불 값(True/False) 이 모두 False 일 때에만 True 를 출력하는 프로그램을 작성해보자.

# a, b = input().split(' ')
# a = bool(int(a))
# b = bool(int(b))
# print(not a and not b)

#
#
#
#
""" 6059 : [기초-비트단위논리연산] 비트단위로 NOT 하여 출력하기 """

# 입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.
# 비트단위(bitwise)연산자 ~ 를 붙이면 된다.(~ : tilde, 틸드라고 읽는다.)

# ** 비트단위(bitwise) 연산자는,
# ~(bitwise not), &(bitwise and), |(bitwise or), ^(bitwise xor),
# <<(bitwise left shift), >>(bitwise right shift)
# 가 있다.

# 예를 들어 1이 입력되었을 때 저장되는 1을 32비트 2진수로 표현하면
#         00000000 00000000 00000000 00000001 이고,
# ~1은 11111111 11111111 11111111 11111110 가 되는데 이는 -2를 의미한다.

# 참고
# 컴퓨터에 저장되는 모든 데이터들은 2진수 형태로 바뀌어 저장된다.
# 0과 1로만 구성되는 비트단위들로 변환되어 저장되는데,
# 양의 정수는 2진수 형태로 바뀌어 저장되고, 음의 정수는 "2의 보수 표현"방법으로 저장된다.

# 정수 n이라고 할 때,
# ~n = -n - 1
# -n = ~n + 1 과 같은 관계로 표현할 수 있다.

# a = int(input())
# print(~a)  # 2의 보수 만들어 출력

#
#
#
#
""" 6060 : [기초-비트단위논리연산] 비트단위로 AND 하여 출력하기 """

# 입력된 정수 두 개를 비트단위로 and 연산한 후 그 결과를 정수로 출력해보자.
# 비트단위(bitwise)연산자 &를 사용하면 된다.(and, ampersand, 앰퍼센드라고 읽는다.)

# ** 비트단위(bitwise)연산자는,
# ~(bitwise not), &(bitwise and), |(bitwise or), ^(bitwise xor),
# <<(bitwise left shift), >>(bitwise right shift)
# 가 있다.

# 예를 들어 3과 5가 입력되었을 때를 살펴보면
# 3     : 00000000 00000000 00000000 00000011
# 5     : 00000000 00000000 00000000 00000101
# 3 & 5 : 00000000 00000000 00000000 00000001

# 비트단위 and 연산은 두 비트열이 주어졌을 때,
# 둘 다 1인 부분의 자리만 1로 만들어주는 것과 같다.

# a, b = input().split(' ')
# print(int(a) & int(b))

#
#
#
#
""" 6061 : [기초-비트단위논리연산] 비트단위로 OR 하여 출력하기 """

# 입력된 정수 두 개를 비트단위로 or 연산한 후 그 결과를 정수로 출력해보자.
# 비트단위(bitwise) 연산자 |(or, vertical bar, 버티컬바)를 사용하면 된다.

# ** | 은 파이프(pipe)연산자라고도 불리는 경우가 있다.

# ** 비트단위(bitwise) 연산자는,
# ~(bitwise not), &(bitwise and), |(bitwise or), ^(bitwise xor),
# <<(bitwise left shift), >>(bitwise right shift)
# 가 있다.

# 예를 들어 3과 5가 입력되었을 때를 살펴보면
# 3    : 00000000 00000000 00000000 00000011
# 5    : 00000000 00000000 00000000 00000101
# 3 | 5 : 00000000 00000000 00000000 00000111

# 비트단위 or 연산은 둘 중 하나라도 1인 자리를 1로 만들어주는 것과 같다.

# a, b = input().split(' ')
# print( int(a) | int(b) )

#
#
#
#
""" 6062 : [기초-비트단위논리연산] 비트단위로 XOR 하여 출력하기 """

# 입력된 정수 두 개를 비트단위로 xor 연산한 후 그 결과를 정수로 출력해보자.
# 비트단위(bitwise) 연산자 ^(xor, circumflex/caret, 서컴플렉스/카릿)를 사용하면 된다.

# ** 주의 ^은 수학식에서 거듭제곱(power)을 나타내는 기호와 모양은 같지만,
# C언어에서는 전혀 다른 배타적 논리합(xor, 서로 다를 때 1)의 의미를 가진다.

# ** 비트단위(bitwise) 연산자는,
# ~(bitwise not), &(bitwise and), |(bitwise or), ^(bitwise xor),
# <<(bitwise left shift), >>(bitwise right shift)
# 가 있다.

# 예를 들어 3과 5가 입력되었을 때를 살펴보면
# 3     : 00000000 00000000 00000000 00000011
# 5     : 00000000 00000000 00000000 00000101
# 3 ^ 5 : 00000000 00000000 00000000 00000110

# 이러한 비트단위 연산은 빠른 계산이 필요한 그래픽처리에서도 효과적으로 사용된다.

# a, b = input().split(' ')
# print(int(a) ^ int(b))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 - 3항연산 """
""" 6063 : [기초-3항연산] 정수 2개 입력받아 큰 값 출력하기 """

# 입력된 두 정수(a, b) 중 큰 값을 출력하는 프로그램을 작성해보자.
# 단, 3항 연산을 사용한다.

# 참고
# 3개의 요소로 이루어지는 3항 연산은
# "x if C else y" 의 형태로 작성이 된다.
# - C : True 또는 False 를 평가할 조건식(conditional expression) 또는 값
# - x : C의 평가 결과가 True 일 때 사용할 값
# - y : C의 평가 결과가 True 가 아닐 때 사용할 값

# a, b = input().split(' ')
# a = int(a)
# b = int(b)
# c = a if a>=b else b  # 3항연산 사용!
# print(int(c))

#
#
#
#
""" 일반적인 프로그래밍 언어와 다른 문법 - 3항연산 """
""" 6064 : [기초-3항연산] 정수 3개 입력받아 가장 작은 값 출력하기 """

# 입력된 세 정수 a, b, c 중 가장 작은 값을 출력하는 프로그램을 작성해보자.
# 단, 3항 연산을 사용한다.

# a, b, c = input().split(' ')
# a = int(a)
# b = int(b)
# c = int(c)
# res = a if a<=b else b
# res = res if res<=c else c
# print(int(res))
