""" 다이나믹 프로그래밍 : DP (Dynamic Programming) """

# 카테고리
#     탑다운 방식
#     보텀업 방식

# 다이나믹 프로그래밍(== 동적 계획법)
# 점화식을 재귀함수로 표현하고, 재귀함수의 결과를 dp 테이블에 저장해 중복되는 연산(함수 호출)을 줄이는 것
# 큰 문제를 작게 나누고 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법
# DP 테이블 이용
# 사용 사능 조건
#     1. 큰 문제를 작은 문제로 나눌 수 있다
#     2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다


""" 탑다운 방식 (메모제이션 기법) """

# == 메모제이션 방식, 하향식
# 큰 문제를 해결하기 위해 작은 문제를 호출하는 방식
# 한 번 구한 결과를 DP 테이블에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법
# 구현 : 다이나믹 프로그래밍을 재귀적으로 수행하다가 같은 정보가 필요할 때는 이미 구한 정답을 리스트에서 가져옴


# 피보나치 DP 탑다운(재귀 함수)
def dp_fibo_recur():
    n = 10
    dp = [0] * (n + 1)

    def fibo(a):
        if a == 1 or a == 2:
            return 1
        if dp[a] != 0:
            return dp[a]
        dp[a] = fibo(a - 1) + fibo(a - 2)
        return dp[a]

    ans = fibo(n)
    print(dp)
    print(ans)
# dp_fibo_recur()


""" 보텀업 방식 """
# == 상향식
# 작은 문제부터 차근차근 답을 도출
# 반복문을 이용해 구현

# 피보나치 DP 보텀업(반복문)
def dp_fibo_for():
    n = 10
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 1

    for i in range(3, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]

    print(dp)
    print(dp[n])
# dp_fibo_for()